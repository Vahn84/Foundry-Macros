// REQUIRES MIDI-QOL & FURNACE TO WORK CORRECTLY
// Positional Macro for Thunderwave. Reads the Token Position around and inside the template to choose which animation to play.
// Requires FX Master Module
if (!canvas.fxmaster) ui.notifications.error("This macro depends on the FXMaster module. Make sure it is installed and enabled");

const lastArg = args[args.length - 1];
const castingToken = canvas.tokens.get(lastArg.tokenId)
let item = lastArg.item;

const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))

    const templateID = canvas.templates.placeables[canvas.templates.placeables.length - 1].data._id;
    let template = await canvas.templates.get(templateID);
    let gridSize = canvas.scene.data.grid;
    let Scale = canvas.scene.data.grid/200;
    let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)
// Change this file path if you are on the free module
    let file = "modules/jb2a_patreon/Library/1st_Level/Thunderwave/";

let anFile = `${file}Thunderwave_01_Bright_Blue_Bmid_600x600.webm`;
let ang = 0;
switch(true){
   case ((myToken.data.x>=template.x && myToken.data.x<=(template.x + (gridSize *2))) && (myToken.data.y>=template.y && myToken.data.y<=(template.y + (gridSize *2)))):
      ang = 0;
      anFile = `${file}Thunderwave_01_Bright_Blue_Center_600x600.webm`;
      break;
   case ((myToken.data.x>=(template.x - gridSize)) && (myToken.data.x<=(template.x - (gridSize * 0.5)))) && ((myToken.data.y>=(template.y - gridSize)) && (myToken.data.y<=(template.y - (gridSize * 0.5)))):
      ang = 270;
      anFile = `${file}Thunderwave_01_Bright_Blue_BLeft_600x600.webm`;
      break;
   case ((myToken.data.x>=(template.x + (gridSize * 2.5))) && (myToken.data.x<=(template.x + (gridSize *3)))) && ((myToken.data.y>=(template.y - gridSize)) && (myToken.data.y<=(template.y - (gridSize * 0.5)))):
      ang = 180;
      anFile = `${file}Thunderwave_01_Bright_Blue_BLeft_600x600.webm`;
      break;
   case (((myToken.data.x>=(template.x + (gridSize * 2.5))) && myToken.data.x<=(template.x + (gridSize * 3))) && ((myToken.data.y<=(template.y + (gridSize * 3))) && (myToken.data.y>=(template.y + (gridSize * 2.5))))):
      ang = 90;
      anFile = `${file}Thunderwave_01_Bright_Blue_BLeft_600x600.webm`;
      break;
   case ((myToken.data.x<=(template.x - (gridSize * 0.5))) && (myToken.data.x>=(template.x - gridSize))) && ((myToken.data.y<=(template.y + (gridSize * 3))) && (myToken.data.y>=(template.y + (gridSize * 2.5)))):
      ang = 0;
      anFile = `${file}Thunderwave_01_Bright_Blue_BLeft_600x600.webm`;
      break;
   case (myToken.data.x==(template.x + (gridSize * 3))) && ((myToken.data.y>=template.y) && myToken.data.y<=(template.y + (gridSize*2))):
      ang = 90;
      break;
   case ((myToken.data.x>=template.x) && (myToken.data.x<=(template.x + (gridSize * 2)))) && ((myToken.data.y>=(template.y - gridSize)) && (myToken.data.y<=(template.y - (gridSize * 0.5)))):
      ang = 180;
      break;
   case ((myToken.data.x>=(template.x-gridSize)) && (myToken.data.x<=(template.x-(gridSize * 0.5)))) && ((myToken.data.y>=template.y) && myToken.data.y<=(template.y + (gridSize*2))):
      ang = 270;
      break;
}
   
    let spellAnim = 
                    {
                     file: anFile,
                      position: {
                       x: (template.x + (gridSize * 1.5)),
                       y: (template.y + (gridSize * 1.5))
                      },
                      anchor: {
                       x: 0.5,
                       y: 0.5
                      },
                      angle: ang,
                      scale: {
                       x: Scale,
                       y: Scale
                      }
                    };

async function SpellAnimation(number) {

    let x = number;
// This is the interval in between the start of each animation on the loop in milliseconds
    let interval = 750;
    for (var i = 0; i < x; i++) {
         setTimeout(function() {
             canvas.fxmaster.playVideo(spellAnim);
         }, i * interval);
    }
}
SpellAnimation(3);

// Add some sound
/*
await wait (100);
let soundFile = `sound path here`;
AudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);
*/

// Delete comments to activate token Magic FX. Requires the Token Magic FX Modules to be installed, and Midi-qol Auto Target on Template placement
/*
let params =
[{
    filterType: "wave",
    filterId: "myShockwave",
    time: 0,
    strength: 0.03,
    frequency: 15,
    maxIntensity: 4.0,
    minIntensity: 0.5,
    padding:25,
    animated :
    {
      time : 
      { 
        active: true, 
        speed: 0.0180,
        animType: "move",
       }
    }
},
{
    filterType: "xfire",
    filterId: "myColdXFire",
    time: 0,
// Change color here in hex format
    color: 0x0075B0,
    blend: 1,
    amplitude: 1,
    dispersion: 0,
    chromatic: false,
    scaleX: 1,
    scaleY: 1,
    inlay: false,
    animated :
    {
      time : 
      { 
        active: true, 
        speed: -0.0015, 
        animType: "move" 
      }
    }
}];
await wait(500);
TokenMagic.addUpdateFiltersOnTargeted(params);
await wait(3500);
TokenMagic.deleteFiltersOnTargeted();
*/
